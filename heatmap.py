import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Confusion matrix data for random Forest
# confusion_matrix = np.array([
#     [1459, 0, 26, 0, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [311, 73, 3, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [102, 0, 306, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [11, 0, 0, 0, 793, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 353, 0, 0, 3, 3, 0, 2, 29, 74, 0, 0, 0, 0, 0, 8, 0, 0, 4],
#     [3, 0, 0, 0, 0, 32, 28, 0, 5, 9, 0, 3, 11, 13, 0, 0, 0, 0, 0, 7, 0, 0, 10],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 6],
#     [0, 0, 0, 0, 0, 9, 0, 0, 71, 10, 0, 0, 15, 14, 0, 0, 0, 0, 0, 0, 0, 0, 4],
#     [0, 0, 0, 0, 0, 0, 0, 0, 1, 143, 0, 0, 12, 26, 0, 0, 0, 0, 0, 0, 0, 0, 2],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 0, 0, 39, 0, 0, 68, 0, 0, 22],
#     [0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 51, 14, 23, 0, 0, 2, 0, 3, 10, 0, 0, 0],
#     [0, 0, 0, 0, 0, 11, 0, 0, 0, 9, 0, 0, 270, 70, 0, 0, 0, 0, 1, 4, 0, 0, 9],
#     [0, 0, 0, 0, 0, 52, 0, 0, 1, 12, 0, 2, 65, 391, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 1, 0, 0, 44, 0, 0, 0, 13, 48, 0, 0, 25, 0, 40, 220, 0, 0, 306],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 5, 2, 0, 0, 35, 0, 0, 64],
#     [0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 30, 1, 0, 2, 267, 1, 16, 33, 0, 0, 113],
#     [34, 0, 0, 0, 0, 16, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 174, 0, 24, 0, 0, 10],
#     [0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 28, 10, 0, 0, 3, 0, 524, 0, 0, 0, 155],
#     [7, 0, 0, 0, 0, 0, 0, 0, 6, 12, 0, 0, 40, 21, 0, 0, 75, 6, 0, 495, 0, 0, 212],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 0, 0, 4, 0, 23, 0, 12],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 11, 0, 7],
#     [0, 0, 0, 0, 0, 1, 0, 0, 44, 0, 0, 0, 90, 53, 0, 0, 36, 0, 52, 249, 0, 0, 1063]
# ])

confusion_matrix = np.array([
    [897,  33,  27,   0,  31,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,   0,   0,   0,   0],
    [ 68, 168,   5,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,   0,   0,   0,   0],
    [ 19,   4, 205,   0,   3,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,   0,   0,   0,   0],
    [  4,   2,   0,   1,  19,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,   0,   0,   0,   0],
    [  3,   0,   0,   2, 470,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,   0,   0,   0,   0],
    [  0,   0,   0,   0,   0, 270,   1,   0,   1,   0,   0,   2,   2,  18,   0,   0,   0,   0,    0,   0,   0,   0,   0],
    [  0,   0,   0,   0,   0,   3,  54,   0,   0,   1,   0,   3,   6,   3,   0,   0,   0,   0,    0,   0,   0,   0,   0],
    [  0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,    0,   0,   0,   0,   0],
    [  0,   0,   0,   0,   0,   0,   0,   0,  62,   5,   0,   0,   0,   1,   0,   0,   0,   0,    0,   0,   0,   0,   2],
    [  0,   0,   0,   0,   0,   0,   1,   0,   6,  98,   0,   0,   1,   5,   0,   0,   0,   0,    0,   0,   0,   0,   0],
    [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  35,   0,   0,   0,   7,   0,   0,   0,    0,  32,   0,   0,  14],
    [  0,   0,   0,   0,   0,   4,   3,   0,   0,   0,   0,  55,   6,   8,   0,   0,   1,   0,    0,   0,   0,   0,   0],
    [  0,   0,   0,   0,   0,   1,   3,   0,   0,   1,   0,   6, 194,  26,   0,   0,   0,   0,    0,   0,   0,   0,   0],
    [  0,   0,   0,   0,   0,   9,   2,   0,   7,   1,   0,   2,  11, 286,   0,   0,   0,   0,    0,   0,   0,   0,   0],
    [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0, 171,   0,   0,   0,    0,  10,   0,   0, 125],
    [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  55,   7,   0,    1,   5,   0,   0,   5],
    [  0,   0,   0,   0,   0,   0,   1,  16,   0,   0,   0,   0,   0,   0,   0,   0, 252,   0,    1,  11,   1,   0,  12],
    [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 119,    0,   4,   0,   0,   0],
    [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2,   0,  416,   0,   1,   0,   6],
    [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  48,   0,   0,   0,   7,   4,  18,  18,    0, 459,   0,   0,  55],
    [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   2,    7,   2,  56,   0,   1],
    [  0,   0,   0,   0,   0,   0,   0,   0,    0,  0,   0,   0,   0,   0,   0,   0,   0,   0,    1,   0,  13,   0,   6],
    [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0, 219,   1,   1,   0,    6,  32,   0,   1, 704]
])

mask = np.zeros_like(confusion_matrix, dtype=bool)
np.fill_diagonal(mask, False)

# Create the heatmap
plt.figure(figsize=(10, 8))

# Adjust the font size to fit values within the cells
sns.heatmap(confusion_matrix, mask=mask, annot=True, fmt="d", cmap="Blues", cbar=True, linewidths=.5, annot_kws={"size": 8})

# Highlight the diagonal with light green
for i in range(confusion_matrix.shape[0]):
    plt.gca().add_patch(plt.Rectangle((i, i), 1, 1, fill=True, color='lightgreen', edgecolor='black', lw=0.5))

plt.title("Confusion Matrix with Diagonal Highlighted")
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.tight_layout()  # Ensures everything fits into the figure neatly
plt.show()